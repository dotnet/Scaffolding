{
  "Identifier": "dotnet-blazorwasm",
  "Files": [
    {
      "FileName": "Program.cs",
      "Options": [
        "MinimalApp"
      ],
      "Methods": {
        "Global": {
          "CodeChanges": [
            {
              "MultiLineBlock": [
                "{",
                "    var authorizationMessageHandler = sp.GetRequiredService<AuthorizationMessageHandler>();",
                "    authorizationMessageHandler.InnerHandler = new HttpClientHandler();",
                "    authorizationMessageHandler = authorizationMessageHandler.ConfigureHandler(",
                "        authorizedUrls: new[] { builder.Configuration[\"DownstreamApi:BaseUrl\"] },",
                "        scopes: new[] { builder.Configuration[\"DownstreamApi:Scopes\"] });",
                "    return new HttpClient(authorizationMessageHandler)",
                "    {",
                "        BaseAddress = new Uri(builder.Configuration[\"DownstreamApi:BaseUrl\"] ?? string.Empty)",
                "    };",
                "}"
              ],
              "Options": [
                "DownstreamApi"
              ],
              "Replace": true,
              "CodeChangeType": "Lambda",
              "Parameter": "sp",
              "Parent": "builder.Services.AddScoped",
              "LeadingTrivia": {
                "Newline": true
              },
              "TrailingTrivia": {
                "Semicolon": false
              }
            },
            {
              "Block": "builder.Services.AddMicrosoftGraphClient(\"https://graph.microsoft.com/User.Read\")",
              "Options": [
                "MicrosoftGraph"
              ],
              "InsertAfter": "builder.Services.AddScoped",
              "LeadingTrivia": {
                "Newline": true
              }
            },
            {
              "Block": "builder.Services.AddMsalAuthentication()",
              "InsertAfter": "builder.Services.AddScoped",
              "LeadingTrivia": {
                "Newline": true
              }
            },
            {
              "Block": "builder.Configuration.Bind(\"AzureAd\", options.ProviderOptions.Authentication)",
              "CodeChangeType": "Lambda",
              "Parameter": "options",
              "Parent": "builder.Services.AddMsalAuthentication",
              "LeadingTrivia": {
                "Newline": true,
                "NumberOfSpaces": 4
              }
            },
            {
              "Block": "options.ProviderOptions.DefaultAccessTokenScopes.Add(\"https://graph.microsoft.com/User.Read\")",
              "Options": [
                "MicrosoftGraph"
              ],
              "CodeChangeType": "Lambda",
              "Parameter": "options",
              "Parent": "builder.Services.AddMsalAuthentication",
              "LeadingTrivia": {
                "NumberOfSpaces": 4
              }
            },
            {
              "Block": "options.ProviderOptions.DefaultAccessTokenScopes.Add(builder.Configuration[\"DownstreamApi:Scopes\"])",
              "Options": [
                "DownstreamApi"
              ],
              "CodeChangeType": "Lambda",
              "Parameter": "options",
              "Parent": "builder.Services.AddMsalAuthentication",
              "LeadingTrivia": {
                "NumberOfSpaces": 4
              }
            }
          ]
        }
      },
      "UsingsWithOptions": [
        {
          "Block": "Microsoft.AspNetCore.Components.WebAssembly.Authentication",
          "Options": [
            "DownstreamApi"
          ]
        }
      ]
    },
    {
      "FileName": "_Imports.razor",
      "Replacements": [
        {
          "Block": "@using Microsoft.AspNetCore.Components.Authorization"
        }
      ]
    },
    {
      "FileName": "App.razor",
      "Replacements": [
        {
          "MultiLineBlock": [
            "<CascadingAuthenticationState>",
            "    <Router AppAssembly=\"@typeof(App).Assembly\">"
          ],
          "ReplaceSnippet": [
            "<Router AppAssembly=\"@typeof(App).Assembly\">"
          ]
        },
        {
          "MultiLineBlock": [
            "       <Found Context=\"routeData\">",
            "            <AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">",
            "                <NotAuthorized>",
            "                    @if (context.User.Identity?.IsAuthenticated != true)",
            "                    {",
            "                        <RedirectToLogin />",
            "                    }",
            "                    else",
            "                    {",
            "                        <p role=\"alert\">You are not authorized to access this resource.</p>",
            "                    }",
            "                </NotAuthorized>",
            "            </AuthorizeRouteView>",
            "            <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />",
            "        </Found>"
          ],
          "ReplaceSnippet": [
            "    <Found Context=\"routeData\">",
            "        <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" />",
            "        <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />",
            "    </Found>"
          ]
        },
        {
          "MultiLineBlock": [
            "        <NotFound>",
            "            <PageTitle>Not found</PageTitle>",
            "            <LayoutView Layout=\"@typeof(MainLayout)\">",
            "                <p role=\"alert\">Sorry, there's nothing at this address.</p>",
            "            </LayoutView>",
            "        </NotFound>"
          ],
          "ReplaceSnippet": [
            "    <NotFound>",
            "        <PageTitle>Not found</PageTitle>",
            "        <LayoutView Layout=\"@typeof(MainLayout)\">",
            "            <p role=\"alert\">Sorry, there's nothing at this address.</p>",
            "        </LayoutView>",
            "    </NotFound>"
          ]
        },
        {
          "MultiLineBlock": [
            "    </Router>",
            "</CascadingAuthenticationState>"
          ],
          "ReplaceSnippet": [
            "</Router>"
          ]
        }
      ]
    },
    {
      "FileName": "index.html",
      "Replacements": [
        {
          "MultiLineBlock": [
            "    <script src=\"_content/Microsoft.Authentication.WebAssembly.Msal/AuthenticationService.js\"></script>    ",
            "    <script src=\"_framework/blazor.webassembly.js\"></script>"
          ],
          "ReplaceSnippet": [
            "    <script src=\"_framework/blazor.webassembly.js\"></script>"
          ]
        }
      ]
    },
    {
      "FileName": "Authentication.razor",
      "AddFilePath": "Pages/Authentication.razor"
    },
    {
      "FileName": "blazorwasm_LoginDisplay.razor",
      "AddFilePath": "Shared/LoginDisplay.razor"
    },
    {
      "FileName": "MainLayout.razor",
      "Replacements": [
        {
          "MultiLineBlock": [
            "        <div class=\"top-row px-4 auth\">",
            "            <LoginDisplay />",
            ""
          ],
          "ReplaceSnippet": [
            "        <div class=\"top-row px-4\">",
            ""
          ]
        }
      ]
    },
    {
      "FileName": "RedirectToLogin.razor",
      "AddFilePath": "Shared/RedirectToLogin.razor"
    },
    {
      "FileName": "NavMenu.razor",
      "Options": [
        "MicrosoftGraph",
        "DownstreamApi"
      ],
      "Replacements": [
        {
          "MultiLineBlock": [
            "</NavLink>",
            "        </div>",
            "        <div class=\"nav-item px-3\">",
            "            <NavLink class=\"nav-link\" href=\"profile\">",
            "                <span class=\"oi oi-person\" aria-hidden=\"true\"></span> Show profile",
            "            </NavLink>",
            "        </div>",
            "    </nav>",
            "</div>"
          ],
          "ReplaceSnippet": [
            "</NavLink>",
            "        </div>",
            "    </nav>",
            "</div>"
          ],
          "Options": [
            "MicrosoftGraph"
          ]
        },
        {
          "Block": "<NavLink class=\"nav-link\" href=\"callwebapi\">",
          "ReplaceSnippet": [
            "<NavLink class=\"nav-link\" href=\"fetchdata\">"
          ],
          "Options": [
            "DownstreamApi"
          ]
        },
        {
          "Block": "<span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Call Web API",
          "ReplaceSnippet": [
            "<span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Fetch data"
          ],
          "Options": [
            "DownstreamApi"
          ]
        }
      ]
    },
    {
      "FileName": "UserProfile.razor",
      "AddFilePath": "Pages/UserProfile.razor",
      "Options": [
        "MicrosoftGraph"
      ]
    },
    {
      "FileName": "GraphClientExtensions.cs",
      "AddFilePath": "Data/GraphClientExtensions.cs",
      "Options": [
        "MicrosoftGraph"
      ]
    },
    {
      "FileName": "FetchData.razor",
      "Options": [
        "DownstreamApi"
      ],
      "Replacements": [
        {
          "MultiLineBlock": [
            "@page \"/callwebapi\"",
            "@using Microsoft.AspNetCore.Authorization"
          ],
          "ReplaceSnippet": [
            "@page \"/fetchdata\""
          ]
        },
        {
          "MultiLineBlock": [
            "@inject HttpClient Http",
            "@attribute [Authorize]"
          ],
          "ReplaceSnippet": [
            "@inject HttpClient Http"
          ]
        },
        {
          "Block": "<p>This component demonstrates fetching data from the downstream API.</p>",
          "ReplaceSnippet": [
            "<p>This component demonstrates fetching data from the server.</p>"
          ]
        },
        {
          "MultiLineBlock": [
            "try",
            "        {",
            "            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(\"weatherforecast\");",
            "        }",
            "        catch(Exception e)",
            "        {",
            "            Console.WriteLine(e.Message);",
            "        }"
          ],
          "ReplaceSnippet": [
            "forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>(\"sample-data/weather.json\");"
          ]
        }
      ]
    }
  ]
}
