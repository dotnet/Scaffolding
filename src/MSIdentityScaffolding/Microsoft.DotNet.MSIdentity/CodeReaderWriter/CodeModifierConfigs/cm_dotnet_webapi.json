{
  "Identifier": "dotnet-webapi",
  "Files": [
    {
      "FileName": "Startup.cs",
      "Methods": {
        "Configure": {
          "Parameters": [ "IApplicationBuilder", "IWebHostEnvironment" ],
          "CodeChanges": [
            {
              "InsertAfter": "IApplicationBuilder.UseRouting()",
              "Block": "IApplicationBuilder.UseAuthentication()"
            }
          ]
        },
        "ConfigureServices": {
          "Parameters": [ "IServiceCollection" ],
          "CodeChanges": [
            {
              "Block": "IServiceCollection.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)"
            },
            {
              "Parent": "IServiceCollection.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)",
              "Options": [ "MemberAccess" ],
              "Block": "AddMicrosoftIdentityWebApi(Configuration.GetSection(\"AzureAd\"));",
              "BlockB2C": "AddMicrosoftIdentityWebApi(Configuration.GetSection(\"AzureAdB2C\"))"
            }
          ]
        }
      },
      "Usings": [
        "Microsoft.AspNetCore.Authentication",
        "Microsoft.Identity.Web",
        "Microsoft.AspNetCore.Authentication.JwtBearer"
      ]
    },
    {
      "FileName": "Program.cs",
      "Methods": {
        "Global": {
          "CodeChanges": [
            {
              "Block": "\nWebApplication.CreateBuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection(\"AzureAd\"));",
              "InsertBefore": [ "builder.Services.AddControllers()", "builder.Build()" ]
            },
            {
              "Parent": "AddMicrosoftIdentityWebApi",
              "Options": [ "MemberAccess", "MicrosoftGraph", "DownstreamApi" ],
              "Block": "EnableTokenAcquisitionToCallDownstreamApi()"
            },
            {
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi()",
              "Options": [ "MemberAccess", "MicrosoftGraph" ],
              "Block": "AddMicrosoftGraph(WebApplication.CreateBuilder.Configuration.GetSection(\"DownstreamApi\")).AddInMemoryTokenCaches()"
            },
            {
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi()",
              "Options": [ "MemberAccess", "DownstreamApi" ],
              "Block": "AddDownstreamWebApi(WebApplication.CreateBuilder.Configuration.GetSection(\"DownstreamApi\")).AddInMemoryTokenCaches()"
            },
            {
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi",
              "Options": [ "MemberAccess", "MicrosoftGraph" ],
              "Block": "AddMicrosoftGraph(builder.Configuration.GetSection(\"DownstreamApi\"))",
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi",
              "Options": [ "MemberAccess", "DownstreamApi" ],
              "Block": "AddDownstreamWebApi(\"DownstreamApi\",builder.Configuration.GetSection(\"DownstreamApi\"))",
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "Parent": "AddDownstreamWebApi",
              "Options": [ "MemberAccess", "DownstreamApi" ],
              "Block": "AddInMemoryTokenCaches()",
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "Parent": "AddMicrosoftGraph",
              "Options": [ "MemberAccess", "MicrosoftGraph" ],
              "Block": "AddInMemoryTokenCaches()",
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "InsertAfter": "app.UseRouting();",
              "Block": "app.UseAuthentication();",
              "InsertBefore": [ "app.UseAuthorization();", "app.Run();" ]
            }
          ]
        }
      },
      "Usings": [
        "Microsoft.AspNetCore.Authentication",
        "Microsoft.Identity.Web",
        "Microsoft.AspNetCore.Authentication.JwtBearer"
      ]
    },
    {
      "FileName": "WeatherForecastController.cs",
      "ClassAttributes": [
        {
          "Block":"Authorize",
          "Options": []
        }
      ],
      "ClassProperties": [
        {
          "Block": "static readonly string[] scopeRequiredByApi = new string[] { \"access_as_user\" }",
          "Options": ["Skip"]
        },
        {
          "Block": "private readonly GraphServiceClient _graphServiceClient",
          "Options": [ "MicrosoftGraph" ]
        },
        {
          "Block": "private readonly IDownstreamWebApi _downstreamWebApi",
          "Options": [ "DownstreamApi" ]
        }
      ],
      "Methods": {
        "Configure": {
          "Parameters": [ "IApplicationBuilder", "IWebHostEnvironment" ],
          "CodeChanges": [
            {
              "InsertAfter": "IApplicationBuilder.UseRouting()",
              "Block": "IApplicationBuilder.UseAuthentication()"
            }
          ]
        },
        "Get": {
          "Parameters": [ "IEnumerable<WeatherForecast>" ],
          "EditType": {
            "Block": "async Task<IEnumerable<WeatherForecast>>",
            "Options": [ "MicrosoftGraph", "DownstreamApi" ]
          },
          "CodeChanges": [
            {
              "Append": true,
              "Block": "var user = await _graphServiceClient.Me.Request().GetAsync();",
              "CodeFormatting": {
                "NumberOfSpaces": 8
              },
              "Options": [ "MicrosoftGraph" ]
            },
            {
              "Append": true,
              "Block": "HttpContext.VerifyUserHasAnyAcceptedScope(scopeRequiredByApi);",
              "Options": [ "Skip" ]
            }
          ]
        }
      },
      "Usings": [
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.Identity.Web.Resource"
      ]
    }
  ] 
}
