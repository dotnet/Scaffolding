{
  "Identifier": "dotnet-webapp",
  "Files": [
    {
      "FileName": "Startup.cs",
      "Options": [ "NonMinimalApp" ],
      "Methods": {
        "Configure": {
          "Parameters": [ "IApplicationBuilder", "IWebHostEnvironment" ],
          "CodeChanges": [
            {
              "InsertAfter": "IApplicationBuilder.UseRouting()",
              "Block": "IApplicationBuilder.UseAuthentication()"
            },
            {
              "Parent": "IApplicationBuilder.UseEndpoints",
              "CodeChangeType": "Lambda",
              "Block": "endpoints.MapControllers()"
            }
          ]
        },
        "ConfigureServices": {
          "Parameters": [ "IServiceCollection" ],
          "CodeChanges": [
            {
              "Block": "IServiceCollection.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)",
              "CodeFormatting": {
                "NumberOfSpaces": 12
              }
            },
            {
              "Parent": "IServiceCollection.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)",
              "CodeChangeType": "MemberAccess",
              "Block": "AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));"
            },
            {
              "Parent": "IServiceCollection.AddRazorPages()",
              "CodeChangeType": "MemberAccess",
              "Block": "AddMvcOptions(options => {})"
            },
            {
              "Parent": "IServiceCollection.AddAuthorization",
              "Parameter": "options",
              "Block": "options.FallbackPolicy = options.DefaultPolicy",
              "CodeChangeType": "Lambda",
              "CodeFormatting": {
                "NumberOfSpaces": 12
              }
            },
            {
              "Parent": "IServiceCollection.AddRazorPages()",
              "CodeChangeType": "MemberAccess",
              "Block": "AddMicrosoftIdentityUI()"
            }
          ]
        }
      },
      "Usings": [
        "Microsoft.AspNetCore.Authentication",
        "Microsoft.Identity.Web",
        "Microsoft.Identity.Web.UI",
        "Microsoft.AspNetCore.Authentication.OpenIdConnect",
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.AspNetCore.Mvc.Authorization"
      ]
    },
    {
      "FileName": "Program.cs",
      "Options": [ "MinimalApp" ],
      "Methods": {
        "Global": {
          "CodeChanges": [
            {
              "Block": "var initialScopes = WebApplication.CreateBuilder.Configuration[\"DownstreamApi:Scopes\"]?.Split(' ') ?? WebApplication.CreateBuilder.Configuration[\"MicrosoftGraph:Scopes\"]?.Split(' ')",
              "Options": [ "DownstreamApi", "MicrosoftGraph" ],
              "InsertBefore": [ "WebApplication.CreateBuilder.Services.AddAuthentication", "WebApplication.CreateBuilder.Services.AddRazorPages" ],
              "CodeFormatting": {
                "Newline": true
              }
            },
            {
              "Block": "WebApplication.CreateBuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)",
              "InsertBefore": [ "WebApplication.CreateBuilder.Services.AddRazorPages" ],
              "CodeFormatting": {
                "Newline": true
              }
            },
            {
              "Block": "AddMicrosoftIdentityWebApp(builder.Configuration.GetSection(\"AzureAd\"))",
              "Parent": "WebApplication.CreateBuilder.Services.AddAuthentication",
              "CodeChangeType": "MemberAccess",
              "CodeFormatting": {
                "Newline": true,
                "NumberOfSpaces": 4
              }
            },
            {
              "Block": "EnableTokenAcquisitionToCallDownstreamApi(initialScopes)",
              "Parent": "AddMicrosoftIdentityWebApp",
              "CodeChangeType": "MemberAccess",
              "Options": [ "MicrosoftGraph", "DownstreamApi" ],
              "CodeFormatting": {
                "NumberOfSpaces": 8,
                "Newline": true
              }
            },
            {
              "Block": "AddMicrosoftGraph(builder.Configuration.GetSection(\"MicrosoftGraph\"))\r\n            .AddInMemoryTokenCaches()",
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi",
              "CodeChangeType": "MemberAccess",
              "Options": [ "MicrosoftGraph" ],
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "Block": "AddDownstreamWebApi(\"DownstreamApi\", builder.Configuration.GetSection(\"DownstreamApi\"))\r\n            .AddInMemoryTokenCaches()",
              "Parent": "EnableTokenAcquisitionToCallDownstreamApi",
              "CodeChangeType": "MemberAccess",
              "Options": [ "DownstreamApi" ],
              "CodeFormatting": {
                "NumberOfSpaces": 12,
                "Newline": true
              }
            },
            {
              "Block": "WebApplication.CreateBuilder.Services.AddAuthorization()",
              "InsertAfter": "WebApplication.CreateBuilder.Services.AddAuthentication",
              "CodeFormatting": {
                "Newline": true
              }
            },     
            {
              "CodeChangeType": "Lambda",
              "Parent": "WebApplication.CreateBuilder.Services.AddAuthorization",
              "Block": "options.FallbackPolicy = options.DefaultPolicy",
              "Parameter": "options",
              "CodeFormatting":
              {
                "Newline":true,
                "NumberOfSpaces": 4
              }
            },
            {
              "Parent": "WebApplication.CreateBuilder.Services.AddRazorPages",
              "CodeChangeType": "MemberAccess",
              "Block": "AddMicrosoftIdentityUI()",
              "CodeFormatting":
              {
                "Newline":true, 
                "NumberOfSpaces": 4
              }
            },
            {
              "InsertAfter": "app.UseRouting",
              "Block": "app.UseAuthentication()",
              "CodeFormatting": {
                "Newline": true
              }
            },
            {
              "InsertAfter": "app.MapRazorPages",
              "Block": "app.MapControllers()"
            }
          ]
        }
      },
      "Usings": [
        "Microsoft.AspNetCore.Authentication",
        "Microsoft.Identity.Web",
        "Microsoft.Identity.Web.UI",
        "Microsoft.AspNetCore.Authentication.OpenIdConnect",
        "Microsoft.AspNetCore.Authorization",
        "Microsoft.AspNetCore.Mvc.Authorization"
      ]
    },
    {
      "FileName": "Index.cshtml.cs",
      "Options" :  [ "MicrosoftGraph", "DownstreamApi" ],
      "ClassProperties": [
        {
          "Block" : "private readonly GraphServiceClient _graphServiceClient",
          "Options": [ "MicrosoftGraph" ]
        },
        {
          "Block": "private readonly IDownstreamWebApi _downstreamWebApi",
          "Options": [ "DownstreamApi" ]
        }
      ],
      "ClassAttributes": [
        {
          "Block": "AuthorizeForScopes(ScopeKeySection = \"DownstreamApi:Scopes\")",
          "Options": [ "DownstreamApi" ]
        },
        {
          "Block": "AuthorizeForScopes(ScopeKeySection = \"MicrosoftGraph:Scopes\")",
          "Options": [ "MicrosoftGraph" ]
        }
      ],
      "Methods": {
        "OnGet":{
          "EditType" : {
           "Block": "async Task",
           "Options": ["MicrosoftGraph", "DownstreamApi"]
          },
          "CodeChanges": [
            {
              "Block": "var user = await _graphServiceClient.Me.Request().GetAsync();",
              "CodeFormatting": {
                "NumberOfSpaces": 12
              },
              "Options" : [ "MicrosoftGraph"]
            },
            {
              "Block": "ViewData[\"GraphApiResult\"] = user.DisplayName;",
              "CodeFormatting": {
                "NumberOfSpaces": 12
              },
              "Options" : [ "MicrosoftGraph"]
            },
            {
              "Block" : "using var response = await _downstreamWebApi.CallWebApiForUserAsync(\"DownstreamApi\").ConfigureAwait(false);",
              "CodeFormatting": {
                "NumberOfSpaces": 12
              },
              "Options" : [ "DownstreamApi"]
            },
            {
              "Block": "\n\n            if (response.StatusCode == System.Net.HttpStatusCode.OK)\n            {\n                var apiResult = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n                ViewData[\"ApiResult\"] = apiResult;\n            }\n            else\n            {\n                var error = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n                throw new HttpRequestException($\"Invalid status code in the HttpResponseMessage: {response.StatusCode}: {error}\");\n            }",
              "Options": [ "DownstreamApi" ]
            }
          ]
        },
        "IndexModel" : {
          "Parameters" : [ "ILogger<IndexModel>" ],
          "AddParameters" : [ 
            {
              "Block":"GraphServiceClient graphServiceClient",
              "Options": [ "MicrosoftGraph"]
            },
            {
              "Block":"IDownstreamWebApi downstreamWebApi",
              "Options": [ "DownstreamApi"]
            }
          ],
          "CodeChanges": [
            {
              "Block": "_graphServiceClient = graphServiceClient;",
              "Options": [ "MicrosoftGraph" ],
              "CodeFormatting": {
                "NumberOfSpaces": 12
              }
            },
            {
              "Block": "_downstreamWebApi = downstreamWebApi;",
              "Options": [ "DownstreamApi" ],
              "CodeFormatting": {
                "NumberOfSpaces": 12
              }
            }
          ]
        }
      },
      "Usings" : [
        "Microsoft.Identity.Web",
        "System.Net"
      ],
      "UsingsWithOptions": [
        {
          "Block": "Microsoft.Graph",
          "Options": [ "MicrosoftGraph" ]
        }
      ]
    },
    {
      "FileName": "Index.cshtml",
      "Options": [ "MicrosoftGraph", "DownstreamApi" ],
      "Methods": {
        "Global": {
          "CodeChanges": [
            {
              "Block": "\n<div>API result</div>\n<div>@ViewData[\"ApiResult\"]</div>\n",
              "Options": [ "DownstreamApi" ]
            },
            {
              "Block": "\n<div>Graph API result</div>\n<div>@ViewData[\"GraphApiResult\"]</div>\n",
              "Options": [ "MicrosoftGraph" ]
            }
          ]
        }
      }
    }
  ]
}
