<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedController" xml:space="preserve">
    <value>Added Controller : '{0}'.</value>
  </data>
  <data name="AdditionalStepsRequired" xml:space="preserve">
    <value>There are probably still some manual steps required.</value>
  </data>
  <data name="CheckoutReadMe" xml:space="preserve">
    <value>Checkout the '{0}' file that got generated.</value>
  </data>
  <data name="CompilationFailedMessage" xml:space="preserve">
    <value>Failed to compile the project in memory{0}{1}</value>
  </data>
  <data name="ControllerNameRequired" xml:space="preserve">
    <value>Controller Name is required</value>
  </data>
  <data name="DbContextNeedsToInheritFromIdentityContextMessage" xml:space="preserve">
    <value>DbContext type '{0}' is found but it does not inherit from '{1}'</value>
  </data>
  <data name="DbContextOptionDesc" xml:space="preserve">
    <value>DbContext class to use.</value>
  </data>
  <data name="DefaultLayoutSwitchDesc" xml:space="preserve">
    <value>Switch to specify that default layout should be used for the views.</value>
  </data>
  <data name="EmptyControllerNameRequired" xml:space="preserve">
    <value>Controller name is required for an Empty Controller</value>
  </data>
  <data name="ExistingDbContextCannotBeUsedForDefaultUI" xml:space="preserve">
    <value>Cannot use an existing DbContext with the '--useDefaultUI' option.</value>
  </data>
  <data name="FileExists_useforce" xml:space="preserve">
    <value>The file {0} exists, use -f option to overwrite</value>
  </data>
  <data name="ForceOptionDesc" xml:space="preserve">
    <value>Specify whether to overwrite existing files.</value>
  </data>
  <data name="InstallEfPackages" xml:space="preserve">
    <value>To scaffold controllers and views using models, install Entity Framework core packages and try again: {0}</value>
  </data>
  <data name="InstallPackagesForScaffoldingIdentity" xml:space="preserve">
    <value>Install the following packages to your project for scaffolding identity: {0}</value>
  </data>
  <data name="InstallPackageMessage" xml:space="preserve">
    <value>Install the following packages to your project:</value>
  </data>
  <data name="InvalidDbContextClassName" xml:space="preserve">
    <value>Value of --dbContext '{0}' is not a valid class name.</value>
  </data>
  <data name="InvalidFilesListMessage" xml:space="preserve">
    <value>Could not find the files below. (Use '--listFiles' to check the list of available files)</value>
  </data>
  <data name="InvalidOptionCombination" xml:space="preserve">
    <value>Option '{0}' cannot be used with option '{1}'.</value>
  </data>
  <data name="InvalidUserClassName" xml:space="preserve">
    <value>Value of --userClass '{0}' is not a valid class name.</value>
  </data>
  <data name="InvalidNamespaceName" xml:space="preserve">
    <value>The namespace name '{0}' is not valid.</value>
  </data>
  <data name="InvalidViewTemplateName" xml:space="preserve">
    <value>The template name '{0}' is not valid. Supported view templates: 'Empty|Create|Edit|Delete|Details|List'"</value>
  </data>
  <data name="InstallSqlPackage" xml:space="preserve">
    <value>To scaffold, install the following Entity Framework core packages and try again: {0}</value>
  </data>
  <data name="LayoutOptionsDesc" xml:space="preserve">
    <value>Custom Layout page to use.</value>
  </data>
  <data name="ModelClassOptionDesc" xml:space="preserve">
    <value>Model class to use.</value>
  </data>
  <data name="ModelClassRequiredForTemplate" xml:space="preserve">
    <value>The '{0}' template cannot be used without specifying a model class. Provide a model using '--model' option.</value>
  </data>
  <data name="MultipleTypesMatchingName" xml:space="preserve">
    <value>Multiple types matching the name {0} exist:{1}, use a fully qualified name"</value>
  </data>
  <data name="NamespaceOptionDesc" xml:space="preserve">
    <value>Specify the name of the namespace to use for the generated controller.</value>
  </data>
  <data name="OutDirOptionDesc" xml:space="preserve">
    <value>Specify the relative output folder path from project where the file needs to be generated, if not specified, file will be generated in the project folder.</value>
  </data>
  <data name="PageModelFlagNotSupported" xml:space="preserve">
    <value>'--noPageModel' flag cannot be used for scaffolding model based Razor Pages.</value>
  </data>
  <data name="ProvideValidArgument" xml:space="preserve">
    <value>Provide a valid {0}</value>
  </data>
  <data name="RazorPageNameRequired" xml:space="preserve">
    <value>Razor Page Name is required.</value>
  </data>
  <data name="ReadmeGenerationFailed" xml:space="preserve">
    <value>Failed to generate a readme: {0}</value>
  </data>
  <data name="ScaffoldingSuccessful_unregistered" xml:space="preserve">
    <value>Scaffolding generated all the code but the new context created could not be registered using dependency injection.</value>
  </data>
  <data name="Scaffolding_additionalSteps" xml:space="preserve">
    <value>There may be additional steps required for the generated code to work. Refer to &lt;forward-link&gt;</value>
  </data>
  <data name="ScriptsOptionDesc" xml:space="preserve">
    <value>Switch to specify whether to reference script libraries in the generated views.</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Failed to generate readme file at '{0}'.</value>
  </data>
  <data name="TemplateNameRequired" xml:space="preserve">
    <value>The TemplateName cannot be empty</value>
  </data>
  <data name="TypeDoesNotExist" xml:space="preserve">
    <value>A type with the name {0} does not exist</value>
  </data>
  <data name="UseForceOption" xml:space="preserve">
    <value>The below files exist. Use '--force' to overwrite: {0}</value>
  </data>
  <data name="UserClassAndDbContextCannotBeSpecifiedTogether" xml:space="preserve">
    <value>'--userClass' cannot be used to specify a user class when using an existing DbContext.</value>
  </data>
  <data name="UserClassCouldNotBeDetermined" xml:space="preserve">
    <value>Could not determine the user class from the DbContext class '{0}'</value>
  </data>
  <data name="ValidationSuccessfull_modelUnset" xml:space="preserve">
    <value>Validation succeded but model type not set</value>
  </data>
  <data name="ViewNameRequired" xml:space="preserve">
    <value>The ViewName cannot be empty.</value>
  </data>
  <data name="InvalidBootstrapVersionForScaffolding" xml:space="preserve">
    <value>The specified bootstrap version '{0}' is not valid. The valid options are '{1}'.</value>
  </data>
  <data name="IdentityNotSupported" xml:space="preserve">
    <value>Scaffolding Identity is not supported for web applications with minimal APIs for hosting and routing.</value>
  </data>
  <data name="AddedEndpoints" xml:space="preserve">
    <value>Added Endpoints : '{0}'.</value>
  </data>
  <data name="InvalidClassName" xml:space="preserve">
    <value>The class name '{0}' is not valid.</value>
  </data>
  <data name="InvalidDatabaseType" xml:space="preserve">
    <value>Invalid database type '{0}'</value>
  </data>
  <data name="NoDbProviderFound" xml:space="preserve">
    <value>No database provider found. Using 'SqlServer' by default for new DbContext creation!</value>
  </data>
  <data name="SqliteObsoleteOption" xml:space="preserve">
    <value>--useSqlite|-sqlite option is obsolete now. Use --databaseProvider|-dbProvider instead in the future.</value>
  </data>
  <data name="InvalidDatabaseProvider" xml:space="preserve">
    <value>Invalid database provider '{0}' found.</value>
  </data>
</root>