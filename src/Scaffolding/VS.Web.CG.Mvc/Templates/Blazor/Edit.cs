// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.Blazor
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\scaffolding-temp\scaffolding\src\Scaffolding\VS.Web.CG.Mvc\Templates\Blazor\Edit.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class Edit : EditBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("@page \"/movies/edit\"\r\n@inject BlazorMovieContext DB\r\n@inject NavigationManager Na" +
                    "vigationManager\r\n\r\n<PageTitle>Edit</PageTitle>\r\n\r\n<h1>Edit</h1>\r\n\r\n<h4>Movie</h4" +
                    ">\r\n<hr />\r\n@if (Movie is null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n " +
                    "   <div class=\"row\">\r\n        <div class=\"col-md-4\">\r\n            <EditForm meth" +
                    "od=\"post\" Model=\"Movie\" OnValidSubmit=\"UpdateMovie\" FormName=\"edit\">\r\n          " +
                    "      <DataAnnotationsValidator />\r\n                <ValidationSummary />\r\n     " +
                    "           <input type=\"hidden\" name=\"Movie.Id\" value=\"@Movie.Id\" />\r\n          " +
                    "      <div class=\"mb-3\">\r\n                    <label for=\"title\" class=\"form-lab" +
                    "el\">Title:</label>\r\n                    <InputText id=\"title\" @bind-Value=\"Movie" +
                    ".Title\" class=\"form-control\" />\r\n                    <ValidationMessage For=\"() " +
                    "=> Movie.Title\" class=\"text-danger\" />\r\n                </div>\r\n                " +
                    "<div class=\"mb-3\">\r\n                    <label for=\"release-date\" class=\"form-la" +
                    "bel\">Release date:</label>\r\n                    <InputDate id=\"release-date\" @bi" +
                    "nd-Value=\"Movie.ReleaseDate\" class=\"form-control\" />\r\n                    <Valid" +
                    "ationMessage For=\"() => Movie.ReleaseDate\" class=\"text-danger\" />\r\n             " +
                    "   </div>\r\n                <div class=\"mb-3\">\r\n                    <label for=\"g" +
                    "enre\" class=\"form-label\">Genre:</label>\r\n                    <InputText id=\"genr" +
                    "e\" @bind-Value=\"Movie.Genre\" class=\"form-control\" />\r\n                    <Valid" +
                    "ationMessage For=\"() => Movie.Genre\" class=\"text-danger\" />\r\n                </d" +
                    "iv>\r\n                <div class=\"mb-3\">\r\n                    <label for=\"price\" " +
                    "class=\"form-label\">Price:</label>\r\n                    <InputNumber id=\"price\" @" +
                    "bind-Value=\"Movie.Price\" min=\"0\" step=\"0.01\" class=\"form-control\" />\r\n          " +
                    "          <ValidationMessage For=\"() => Movie.Price\" class=\"text-danger\" />\r\n   " +
                    "             </div>\r\n                <button type=\"submit\" class=\"btn btn-primar" +
                    "y\">Save</button>\r\n            </EditForm>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n<div" +
                    ">\r\n    <a href=\"/movies\">Back to List</a>\r\n</div>\r\n\r\n@code {\r\n    [SupplyParamet" +
                    "erFromQuery]\r\n    public int Id { get; set; }\r\n\r\n    [SupplyParameterFromForm]\r\n" +
                    "    public Movie? Movie { get; set; }\r\n\r\n    protected override async Task OnIni" +
                    "tializedAsync()\r\n    {\r\n        Movie ??= await DB.Movie.FirstOrDefaultAsync(m =" +
                    "> m.Id == Id);\r\n\r\n        if (Movie is null)\r\n        {\r\n            // Need a w" +
                    "ay to trigger a 404 here\r\n            // https://github.com/dotnet/aspnetcore/is" +
                    "sues/45654\r\n        }\r\n    }\r\n\r\n    // To protect from overposting attacks, enab" +
                    "le the specific properties you want to bind to.\r\n    // For more details, see ht" +
                    "tps://aka.ms/RazorPagesCRUD.\r\n    public async Task UpdateMovie()\r\n    {\r\n      " +
                    "  DB.Attach(Movie!).State = EntityState.Modified;\r\n\r\n        try\r\n        {\r\n   " +
                    "         await DB.SaveChangesAsync();\r\n        }\r\n        catch (DbUpdateConcurr" +
                    "encyException)\r\n        {\r\n            if (!MovieExists(Movie!.Id))\r\n           " +
                    " {\r\n                // Need a way to trigger a 404 here\r\n                // http" +
                    "s://github.com/dotnet/aspnetcore/issues/45654\r\n            }\r\n            else\r\n" +
                    "            {\r\n                throw;\r\n            }\r\n        }\r\n\r\n        Navig" +
                    "ationManager.NavigateTo(\"/movies\");\r\n    }\r\n\r\n    bool MovieExists(int id)\r\n    " +
                    "{\r\n        return DB.Movie.Any(e => e.Id == id);\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class EditBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
