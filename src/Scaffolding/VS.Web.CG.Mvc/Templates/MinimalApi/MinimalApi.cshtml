@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string modelConstructor = $"{modelName}()";
    string modelArray = $"{modelName}[]";
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string methodName = $"Map{@modelName}Endpoints";
    string pluralModel = Model.ModelType.PluralName;
    string routePrefixPlural = "/api/" + pluralModel;
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
    string resultsExtension = (Model.UseTypedResults ? "TypedResults" : "Results") + ".NoContent()";
    string builderExtensionSpaces = new string(' ', 8);
}
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}
namespace @Model.EndpointsNamespace;

public static class @endPointsClassName
{
    public static void @Model.MethodName (this IEndpointRouteBuilder routes)
    {
@{
    if(Model.OpenAPI)
    {
        @:var group = routes.MapGroup("@routePrefix").WithTags(nameof(@modelName));
    }
    else
    {
        @:var group = routes.MapGroup("@routePrefix");
    }
}

        group.MapGet("/", () =>
        {
            return new [] { new @modelConstructor };
        })
@{
    string builderExtensions = $".WithName(\"{@getAllModels}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if(!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelArray}>(StatusCodes.Status200OK)";
    }
        @:@builderExtensions;
}

        group.MapGet("/{id}", (int id) =>
        {
            //return new @modelName { ID = id };
        })
@{
    builderExtensions = $".WithName(\"{@getModelById}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if(!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)";
    }
        @:@builderExtensions;
}

        group.MapPut("/{id}", (int id, @modelName input) =>
        {
            return @resultsExtension;
        })
@{
    builderExtensions = $".WithName(\"{@updateModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces(StatusCodes.Status204NoContent)";
    }
        @:@builderExtensions;
}

        group.MapPost("/", (@modelName model) =>
        {
        @{
        if(!Model.UseTypedResults)
        {
            @://return Results.Created($"@routePrefixPlural/{model.ID}", model);
        }
        else
        {
            @://return TypedResults.Created($"@routePrefixPlural/{model.ID}", model);
        }
        }
        })
@{
    builderExtensions = $".WithName(\"{@createModel}\")";
    if(Model.OpenAPI)
    {
    builderExtensions+= $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
    builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status201Created)";
    }
        @:@builderExtensions;
}

        group.MapDelete("/{id}", (int id) =>
        {
@{
        if(!Model.UseTypedResults)
        {
            @://return Results.Ok(new @modelName { ID = id });
        }
        else
        {
            @://return TypedResults.Ok(new @modelName { ID = id });
        }
}
        })
@{
    builderExtensions = $".WithName(\"{@deleteModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)";
    }
        @:@builderExtensions;
    }
    }
}
