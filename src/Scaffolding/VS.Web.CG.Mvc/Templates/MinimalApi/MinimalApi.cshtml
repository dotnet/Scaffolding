@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string modelConstructor = $"{modelName}()";
    string modelArray = $"{modelName}[]";
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string methodName = $"Map{@modelName}Endpoints";
    string pluralModel = $"{@modelName}s";
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
}
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}
namespace @Model.EndpointsNamespace;

public static class @endPointsClassName
{
    public static void @Model.MethodName (this IEndpointRouteBuilder routes)
    {
        routes.MapGet("@routePrefix", () =>
        {
            return new [] { new @modelConstructor };
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@getAllModels")
        @:.Produces<@modelArray>(StatusCodes.Status200OK);
    }
    else
    {
        @:.WithName("@getAllModels");
    }
    }

        routes.MapGet("@routePrefix/{id}", (int id) =>
        {
            //return new @modelName { ID = id };
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@getModelById")
        @:.Produces<@modelName>(StatusCodes.Status200OK);
    }
    else
    {
        @:.WithName("@getModelById");
    }
    }

        routes.MapPut("@routePrefix/{id}", (int id, @modelName input) =>
        {
            return Results.NoContent();
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@updateModel")
        @:.Produces(StatusCodes.Status204NoContent);
    }
    else
    {
        @:.WithName("@updateModel");
    }
    }

        routes.MapPost("@routePrefix/", (@modelName model) =>
        {
            //return Results.Created($"/@pluralModel/{model.ID}", model);
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@createModel")
        @:.Produces<@modelName>(StatusCodes.Status201Created);
    }
    else
    {
        @:.WithName("@createModel");
    }
    }

        routes.MapDelete("@routePrefix/{id}", (int id) =>
        {
            //return Results.Ok(new @modelName { ID = id });
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@deleteModel")
        @:.Produces<@modelName>(StatusCodes.Status200OK);
    }
    else
    {
        @:.WithName("@deleteModel");  
    }
    }
    }
}
