@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string dbProvider = Model.DatabaseProvider.ToString();
    string modelList = $"List<{@modelName}>";
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string methodName = $"Map{@modelName}Endpoints";
    string pluralModel = Model.ModelType.PluralName;
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
    string dbContextName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetNoTracking = $"{entitySetName}.AsNoTracking()";
    var entityProperties = Model.ModelMetadata.Properties;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyNameLowerCase = primaryKeyName.ToLowerInvariant();
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var modelToList = $"{@entitySetName}.ToListAsync()";
    var findModel = $"{@entitySetName}.FindAsync({@primaryKeyNameLowerCase})";
    var add = $"{@entitySetName}.Add({@Model.ModelVariable})";
    var remove = $"{@entitySetName}.Remove({@Model.ModelVariable})";
    string resultsExtension = Model.UseTypedResults ? "TypedResults" : "Results";
    string typedTaskWithNotFound = Model.UseTypedResults ? $"Task<Results<Ok<{@modelName}>, NotFound>>" : "";
    string typedTaskOkNotFound = Model.UseTypedResults ? $"Task<Results<Ok, NotFound>>" : "";
    string typedTaskWithNoContent = Model.UseTypedResults ? $"Task<Results<NotFound, NoContent>>" : "";
    string resultsNotFound = $"{resultsExtension}.NotFound()";
    string resultsOkModel = $"{resultsExtension}.Ok(model)";
    string resultsOkEmpty = $"{resultsExtension}.Ok()";
    string resultsNoContent = $"{resultsExtension}.NoContent()";
    string resultsOkModelVariable = $"{resultsExtension}.Ok({@Model.ModelVariable})";
    string createdApiVar = string.Format("$\"{0}/{{{1}.{2}}}\",{3}", @routePrefix, @Model.ModelVariable, @primaryKeyName, @Model.ModelVariable);
    string resultsCreated = $"{resultsExtension}.Created(" + $"{@createdApiVar}" + ")";
    string builderExtensionSpaces = new string(' ', 8);
}
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}
namespace @Model.EndpointsNamespace;

public static class @endPointsClassName
{
    public static void @Model.MethodName (this IEndpointRouteBuilder routes)
    {
@{
    if(Model.OpenAPI)
    {
        @:var group = routes.MapGroup("@routePrefix").WithTags(nameof(@modelName));
    }
    else
    {
        @:var group = routes.MapGroup("@routePrefix");
    }
}

        group.MapGet("/", async (@dbContextName db) =>
        {
            return await db.@modelToList;
        })
@{
        string builderExtensions = $".WithName(\"{@getAllModels}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if (!Model.UseTypedResults)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelList}>(StatusCodes.Status200OK)";
        }

        @:@builderExtensions;
}

        group.MapGet("/{id}", async @typedTaskWithNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @dbContextName db) =>
        {
            return await db.@entitySetNoTracking
                .FirstOrDefaultAsync(model => model.@primaryKeyName == @primaryKeyNameLowerCase)
                is @modelName model
                    ? @resultsOkModel
                    : @resultsNotFound;
        })
@{
    builderExtensions = $".WithName(\"{@getModelById}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)";
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
    }
        @:@builderExtensions;
}

@if (dbProvider == "CosmosDb")
{
        @:group.MapPut("/{id}", async @typedTaskWithNoContent (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @modelName @Model.ModelVariable, @dbContextName db) =>
        @:{
            @:var foundModel = await db.@findModel;

            @:if (foundModel is null)
            @:{
                @:return @resultsNotFound;
            @:}
            
            @:db.Update(@Model.ModelVariable);
            @:await db.SaveChangesAsync();

            @:return @resultsNoContent;
        @:})
}
@if (dbProvider != "CosmosDb")
{
        @:group.MapPut("/{id}", async @typedTaskOkNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @modelName @Model.ModelVariable, @dbContextName db) =>
        @:{
            @:var affected = await db.@entitySetName
                @:.Where(model => model.@primaryKeyName == @primaryKeyNameLowerCase)
                @:.ExecuteUpdateAsync(setters => setters
    //should be atleast one property (primary key)
    foreach(var modelProperty in entityProperties)
    {
        string modelPropertyName = modelProperty.PropertyName;
        string setPropertyString = $".SetProperty(m => m.{modelPropertyName}, {Model.ModelVariable}.{modelPropertyName})";
                    @:@setPropertyString
    }
                    @:);

            @:return affected == 1 ? @resultsOkEmpty : @resultsNotFound;
        @:})
}
@{
        builderExtensions = $".WithName(\"{@updateModel}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if (!Model.UseTypedResults)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
            builderExtensions += $"\r\n{builderExtensionSpaces}.Produces(StatusCodes.Status204NoContent)";
        }

        @:@builderExtensions;
}

        group.MapPost("/", async (@modelName @Model.ModelVariable, @dbContextName db) =>
        {
            db.@add;
            await db.SaveChangesAsync();
            return @resultsCreated;
        })
@{
        builderExtensions = $".WithName(\"{@createModel}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if(!Model.UseTypedResults)
        {
            builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status201Created)";
        }
        @:@builderExtensions;
}

@if(dbProvider == "CosmosDb")
{
        @:group.MapDelete("/{id}", async @typedTaskWithNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @dbContextName db) =>
        @:{
        @:    if (await db.@findModel is @modelName @Model.ModelVariable)
        @:    {
        @:        db.@remove;
        @:        await db.SaveChangesAsync();
        @:        return @resultsOkModelVariable;
        @:    }

        @:    return @resultsNotFound;
        @:})
}
@if (dbProvider != "CosmosDb")
{
        @:group.MapDelete("/{id}", async @typedTaskOkNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @dbContextName db) =>
        @:{
        @:    var affected = await db.@entitySetName
        @:        .Where(model => model.@primaryKeyName == @primaryKeyNameLowerCase)
        @:        .ExecuteDeleteAsync();

        @:    return affected == 1 ? @resultsOkEmpty : @resultsNotFound;
        @:})
}
@{
    builderExtensions = $".WithName(\"{@deleteModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)";
        builderExtensions += $"\r\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
    }
        @:@builderExtensions;
}
    }
}
