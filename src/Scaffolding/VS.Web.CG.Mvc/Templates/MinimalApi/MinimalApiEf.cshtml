@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string modelList = $"List<{@modelName}>";
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string methodName = $"Map{@modelName}Endpoints";
    string pluralModel = $"{@modelName}s";
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
    string dbContextName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var modelToList = $"{@entitySetName}.ToListAsync()";
    var findModel = $"{@entitySetName}.FindAsync({@primaryKeyName})";
    var add = $"{@entitySetName}.Add({@Model.ModelVariable})";
    var remove = $"{@entitySetName}.Remove({@Model.ModelVariable})";
    var model2 = $"{@Model.ModelVariable}2";
}
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}
namespace @Model.EndpointsNamespace;

public static class @endPointsClassName
{
    public static void @methodName (this IEndpointRouteBuilder routes)
    {
        routes.MapGet("@routePrefix", async (@dbContextName db) =>
        {
            return await db.@modelToList;
        })
        .WithName("@getAllModels");
        .Produces<@modelList>>(StatusCodes.Status200OK);

        routes.MapGet("@routePrefix/{id}", async (@primaryKeyShortTypeName @primaryKeyName, @dbContextName db) =>
        {
            return await db.@findModel
                is @modelName model
                    ? Results.Ok(model)
                    : Results.NotFound();
        })
        .WithName("@getModelById");
        .Produces<@modelName>(StatusCodes.Status200OK)
        .Produces(StatusCodes.Status404NotFound);

        routes.MapPut("@routePrefix/{id}", async (@primaryKeyShortTypeName @primaryKeyName, @modelName @Model.ModelVariable, @dbContextName db) =>
        {
            var foundModel = await db.@findModel;

            if (foundModel is null)
            {
                return Results.NotFound();
            }
            //update model properties here

            await db.SaveChangesAsync();

            return Results.NoContent();
        })
        .WithName("@updateModel");
        .Produces(StatusCodes.Status404NotFound)
        .Produces(StatusCodes.Status204NoContent);

        routes.MapPost("@routePrefix/", async (@modelName @Model.ModelVariable, @dbContextName db) =>
        {
            db.@add;
            await db.SaveChangesAsync();
            return Results.Created($"/@pluralModel/{@Model.ModelVariable.@primaryKeyName}", @Model.ModelVariable);
        })
        .WithName("@createModel");
        .Produces<@modelName>(StatusCodes.Status201Created);

        routes.MapDelete("@routePrefix/{id}", async (@primaryKeyShortTypeName @primaryKeyName, @dbContextName db) =>
        {
            if (await db.@findModel is @modelName @Model.ModelVariable)
            {
                db.@remove;
                await db.SaveChangesAsync();
                return Results.Ok(@Model.ModelVariable);
            }

            return Results.NotFound();
        })
        .WithName("@deleteModel");
        .Produces<@modelName>(StatusCodes.Status200OK)
        .Produces(StatusCodes.Status404NotFound);
    }
}
