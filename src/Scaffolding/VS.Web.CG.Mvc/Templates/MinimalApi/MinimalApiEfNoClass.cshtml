@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string pluralModel = $"{@modelName}s";
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
    string dbContextName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyNameLowerCase = primaryKeyName.ToLowerInvariant();
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var modelList = $"List<{@modelName}>";
    var modelToList = $"{@entitySetName}.ToListAsync()";
    var findModel = $"{@entitySetName}.FindAsync({@primaryKeyNameLowerCase})";
    var add = $"{@entitySetName}.Add({@Model.ModelVariable})";
    var remove = $"{@entitySetName}.Remove({@Model.ModelVariable})";
    string resultsExtension = Model.UseTypedResults ? "TypedResults" : "Results";
    string typedTaskWithNotFound = Model.UseTypedResults ? $"Task<Results<Ok<{@modelName}>, NotFound>>" : "";
    string typedTaskWithNoContent = Model.UseTypedResults ? $"Task<Results<NotFound, NoContent>>" : "";
    string resultsNotFound = $"{resultsExtension}.NotFound()";
    string resultsOkModel = $"{resultsExtension}.Ok(model)";
    string resultsNoContent = $"{resultsExtension}.NoContent()";
    string resultsOkModelVariable = $"{resultsExtension}.Ok({@Model.ModelVariable})";
    string createdApiVar = string.Format("$\"{0}/{{{1}.{2}}}\",{3}", @routePrefix, @Model.ModelVariable, @primaryKeyName, @Model.ModelVariable);
    string resultsCreated = $"{resultsExtension}.Created(" + $"{@createdApiVar}" + ")";
    string builderExtensionSpaces = new string(' ', 8);
}
    public static void @Model.MethodName (this IEndpointRouteBuilder routes)
    {
@{
    if(Model.OpenAPI)
    {
        @:var group = routes.MapGroup("@routePrefix").WithTags(nameof(@modelName));
    }
    else
    {
        @:var group = routes.MapGroup("@routePrefix");
    }
}    

        group.MapGet("/", async (@dbContextName db) =>
        {
            return await db.@modelToList;
        })
@{
        string builderExtensions = $".WithName(\"{@getAllModels}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if (!Model.UseTypedResults)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.Produces<{@modelList}>(StatusCodes.Status200OK)";
        }

        @:@builderExtensions;
}

        group.MapGet("/{id}", async @typedTaskWithNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @dbContextName db) =>
        {
            return await db.@findModel
                is @modelName model
                    ? @resultsOkModel
                    : @resultsNotFound;
        })
@{
    builderExtensions = $".WithName(\"{@getModelById}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)"; 
        builderExtensions += $"\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
    }
        @:@builderExtensions;
}

        group.MapPut("/{id}", async @typedTaskWithNoContent (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @modelName @Model.ModelVariable, @dbContextName db) =>
        {
            var foundModel = await db.@findModel;

            if (foundModel is null)
            {
                return @resultsNotFound;
            }
            
            db.Update(@Model.ModelVariable);
            await db.SaveChangesAsync();

            return @resultsNoContent;
        })
@{
        builderExtensions = $".WithName(\"{@updateModel}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if (!Model.UseTypedResults)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
            builderExtensions += $"\n{builderExtensionSpaces}.Produces(StatusCodes.Status204NoContent)";
        }

        @:@builderExtensions;
}

        group.MapPost("/", async (@modelName @Model.ModelVariable, @dbContextName db) =>
        {
            db.@add;
            await db.SaveChangesAsync();
            return @resultsCreated;
        })
@{
        builderExtensions = $".WithName(\"{@createModel}\")";
        if(Model.OpenAPI)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
        }
        if(!Model.UseTypedResults)
        {
            builderExtensions += $"\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status201Created)";
        }
        @:@builderExtensions;
}

        group.MapDelete("/{id}", async @typedTaskWithNotFound (@primaryKeyShortTypeName @primaryKeyNameLowerCase, @dbContextName db) =>
        {
            if (await db.@findModel is @modelName @Model.ModelVariable)
            {
                db.@remove;
                await db.SaveChangesAsync();
                return @resultsOkModelVariable;
            }

            return @resultsNotFound;
        })
@{
    builderExtensions = $".WithName(\"{@deleteModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces<{@modelName}>(StatusCodes.Status200OK)";
        builderExtensions += $"\n{builderExtensionSpaces}.Produces(StatusCodes.Status404NotFound)";
    }
        @:@builderExtensions;
}
    }
