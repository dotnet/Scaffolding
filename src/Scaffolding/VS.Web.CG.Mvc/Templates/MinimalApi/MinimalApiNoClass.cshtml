@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
    string modelName = Model.ModelType.Name;
    string modelConstructor = $"{modelName}()";
    string modelArray = $"{modelName}[]";
    string routePrefix = "/api/" + modelName;
    string endPointsClassName = Model.EndpointsName;
    string methodName = $"Map{@modelName}Endpoints";
    string pluralModel = $"{@modelName}s";
    string getAllModels = $"GetAll{@pluralModel}";
    string getModelById = $"Get{@modelName}ById";
    string deleteModel = $"Delete{@modelName}";
    string createModel = $"Create{@modelName}";
    string updateModel = $"Update{@modelName}";
    string resultsExtension = (Model.OpenAPI ? "TypedResults" : "Results") + ".NoContent()";
}
 
   public static void @Model.MethodName (this IEndpointRouteBuilder routes)
    {
@{
    if(Model.OpenAPI)
    {
        @:var group = routes.MapGroup("@routePrefix").WithTags(nameof(@modelName));
    }
    else
    {
        @:var group = routes.MapGroup("@routePrefix");
    }
}    

        group.MapGet("/", () =>
        {
            return new [] { new @modelConstructor };
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@getAllModels")
        @:.WithOpenApi();
    }
    else
    {
        @:.WithName("@getAllModels");
    }
    }

        group.MapGet("/{id}", (int id) =>
        {
            //return new @modelName { ID = id };
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@getModelById")
        @:.WithOpenApi();
    }
    else
    {
        @:.WithName("@getModelById");
    }
    }

        group.MapPut("/{id}", (int id, @modelName input) =>
        {
            return @resultsExtension;
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@updateModel")
        @:.WithOpenApi();
    }
    else
    {
        @:.WithName("@updateModel");
    }
    }

        group.MapPost("/", (@modelName model) =>
        {
        @{
        if(Model.OpenAPI)
        {
            @://return TypedResults.Created($"/@pluralModel/{model.ID}", model);
        }
        else
        {
            @://return Results.Created($"/@pluralModel/{model.ID}", model);
        }
        }
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@createModel")
        @:.WithOpenApi();
    }
    else
    {
        @:.WithName("@createModel");
    }
    }

        group.MapDelete("/{id}", (int id) =>
        {
        @{
        if(Model.OpenAPI)
        {
            @://return TypedResults.Ok(new @modelName { ID = id });
        }
        else
        {
            @://return Results.Ok(new @modelName { ID = id });
        }
        }
        })
    @{
    if(Model.OpenAPI)
    {
        @:.WithName("@deleteModel")
        @:.WithOpenApi();
    }
    else
    {
        @:.WithName("@deleteModel");  
    }
    }
    }
