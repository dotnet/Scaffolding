// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using Microsoft.DotNet.Scaffolding.Core.Scaffolders;
using Microsoft.DotNet.Scaffolding.Core.Services;
using Microsoft.DotNet.Scaffolding.Helpers.Roslyn;
using Microsoft.DotNet.Scaffolding.Helpers.Steps;
using Microsoft.DotNet.Tools.Scaffold.Aspire.Helpers;
using Microsoft.Extensions.Logging;

namespace Microsoft.DotNet.Tools.Scaffold.Aspire.Commands;

internal interface ICommandWithSettings
{
    Task<int> ExecuteAsync(CommandSettings settings, ScaffolderContext context);
}

internal class CachingCommand : ICommandWithSettings
{
    private readonly ILogger _logger;
    private readonly IFileSystem _fileSystem;

    public CachingCommand(IFileSystem fileSystem, ILogger logger)
    {
        _fileSystem = fileSystem;
        _logger = logger;
    }

    public async Task<int> ExecuteAsync(CommandSettings settings, ScaffolderContext context)
    {
        _logger.LogInformation("Updating App host project...");
        var appHostResult = await UpdateAppHostAsync(settings);

        _logger.LogInformation("Updating web/worker project...");
        var workerResult = await UpdateWebAppAsync(settings);

        if (appHostResult && workerResult)
        {
            return 0;
        }
        else
        {
            _logger.LogInformation("An error occurred.");
            return -1;
        }
    }

    internal async Task<bool> UpdateAppHostAsync(CommandSettings commandSettings)
    {
        CodeModifierConfig? config = ProjectModifierHelper.GetCodeModifierConfig("redis-apphost.json", System.Reflection.Assembly.GetExecutingAssembly());
        if (config is null)
        {
            _logger.LogInformation("Unable to parse 'redis-apphost.json' CodeModifierConfig.");
            return false;
        }

        var codeModifierProperties = await GetCodeModifierPropertiesAsync(commandSettings);
        CodeChangeStep codeChangeStep = new()
        {
            CodeModifierConfig = config,
            CodeModifierProperties = codeModifierProperties,
            Logger = _logger,
            ProjectPath = commandSettings.AppHostProject,
            CodeChangeOptions = new CodeChangeOptions()
        };

        return await codeChangeStep.ExecuteAsync();
    }

    internal async Task<bool> UpdateWebAppAsync(CommandSettings commandSettings)
    {
        var configName = commandSettings.Type.Equals("redis-with-output-caching", StringComparison.OrdinalIgnoreCase) ? "redis-webapp-oc.json" : "redis-webapp.json";
        CodeModifierConfig? config = ProjectModifierHelper.GetCodeModifierConfig(configName, System.Reflection.Assembly.GetExecutingAssembly());
        if (config is null)
        {
            _logger.LogInformation($"Unable to parse '{configName}' CodeModifierConfig.");
            return false; 
        }

        CodeChangeStep codeChangeStep = new()
        {
            CodeModifierConfig = config,
            CodeModifierProperties = new Dictionary<string, string>(),
            Logger = _logger,
            ProjectPath = commandSettings.Project,
            CodeChangeOptions = new CodeChangeOptions()
        };

        return await codeChangeStep.ExecuteAsync();
    }

    internal async Task<Dictionary<string, string>> GetCodeModifierPropertiesAsync(CommandSettings commandSettings)
    {
        var codeModifierProperties = new Dictionary<string, string>();
        var autoGenProjectNames = await AspireHelpers.GetAutoGeneratedProjectNamesAsync(commandSettings.AppHostProject, _logger);
        //add the web worker project name
        if (autoGenProjectNames.TryGetValue(commandSettings.Project, out var autoGenProjectName))
        {
            codeModifierProperties.Add("$(AutoGenProjectName)", autoGenProjectName);
        }

        return codeModifierProperties;
    }
}
