// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using Microsoft.DotNet.Scaffolding.CodeModification;
using Microsoft.DotNet.Scaffolding.Core.Scaffolders;
using Microsoft.DotNet.Scaffolding.Internal;
using Microsoft.DotNet.Scaffolding.Internal.Services;
using Microsoft.DotNet.Scaffolding.Internal.Telemetry;
using Microsoft.DotNet.Tools.Scaffold.Aspire.Helpers;
using Microsoft.DotNet.Tools.Scaffold.Aspire.Telemetry;
using Microsoft.Extensions.Logging;

namespace Microsoft.DotNet.Tools.Scaffold.Aspire.ScaffoldSteps;

internal class AddAspireCodeChangeStep : CodeModificationStep
{
    private readonly ILogger _logger;
    private readonly ITelemetryService _telemetryService;
    public AddAspireCodeChangeStep(ILogger<CodeModificationStep> logger, ITelemetryService telemetryService) : base(logger)
    {
        _logger = logger;
        _telemetryService = telemetryService;
    }

    public override async Task<bool> ExecuteAsync(ScaffolderContext context, CancellationToken cancellationToken = default)
    {
        if (context.Properties.TryGetValue(nameof(CommandSettings), out var commandSettingsObj) &&
            commandSettingsObj is CommandSettings commandSettings)
        {
            await AddAutoGenProjectPropertiesAsync(commandSettings);
        }

        var result = await base.ExecuteAsync(context, cancellationToken);
        _telemetryService.TrackEvent(new AddAspireCodeChangeTelemetryEvent(context.Scaffolder.DisplayName, result));
        return result;
    }

    internal async Task AddAutoGenProjectPropertiesAsync(CommandSettings commandSettings)
    {
        var autoGenProjectNames = await AspireHelpers.GetAutoGeneratedProjectNamesAsync(commandSettings.AppHostProject, _logger);
        //add the web worker project name
        if (autoGenProjectNames.TryGetValue(commandSettings.Project, out var autoGenProjectName))
        {
            CodeModifierProperties.Add(Constants.CodeModifierPropertyConstants.AutoGenProjectName, autoGenProjectName);
        }
    }
}
