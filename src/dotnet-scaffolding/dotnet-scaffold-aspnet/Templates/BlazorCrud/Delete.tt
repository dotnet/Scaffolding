<#@  template hostSpecific="true" linePragmas="false" #>
<#@  parameter type="Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorCrudModel" name="Model" #>
<#@  import namespace="System.Collections.Generic" #>
<#@  import namespace="System.Text" #>
<#@  import namespace="System.Linq" #>
<#
    string modelName = Model.ModelInfo.ModelTypeName;
    string pluralModel = Model.ModelInfo.ModelTypePluralName;
    string modelNameLowerInv = modelName.ToLowerInvariant();
    string pluralModelLowerInv = pluralModel.ToLowerInvariant();
    string dbContextNamespace = string.IsNullOrEmpty(Model.DbContextInfo.DbContextNamespace) ? string.Empty : Model.DbContextInfo.DbContextNamespace;
    string dbContextFullName = string.IsNullOrEmpty(dbContextNamespace) ? Model.DbContextInfo.DbContextClassName : $"{dbContextNamespace}.{Model.DbContextInfo.DbContextClassName}";
    string dbContextFactory = $"IDbContextFactory<{dbContextFullName}> DbFactory";
    string modelNamespace = Model.ModelInfo.ModelNamespace;
    var entityProperties =  Model.ModelInfo.ModelProperties
        .Where(x => !x.Name.Equals(Model.ModelInfo.PrimaryKeyName, StringComparison.OrdinalIgnoreCase)).ToList();
    string primaryKeyName = Model.ModelInfo.PrimaryKeyName;
    string primaryKeyNameLowerInv = primaryKeyName.ToLowerInvariant();
    string primaryKeyShortTypeName = Model.ModelInfo.PrimaryKeyTypeName;
    string entitySetName = Model.DbContextInfo.EntitySetVariableName;
#>
@page "/<#= pluralModelLowerInv #>/delete"

@using Microsoft.EntityFrameworkCore
<#
    if (!string.IsNullOrEmpty(modelNamespace))
    {
        #>@using <#= modelNamespace#>
<#  }
#>
@inject <#=dbContextFactory #>
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4><#= modelName #></h4>
    <hr />
    @if (<#= modelNameLowerInv #> is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
<#
        foreach (var property in entityProperties)
        {
            string modelPropertyName = property.Name;
    #>
        <dl class="row">
            <dt class="col-sm-2"><#= modelPropertyName #></dt>
            <dd class="col-sm-10">@<#= modelNameLowerInv #>.<#= modelPropertyName #></dd>
        </dl>
<#  } #>
        <EditForm method="post" Model="<#= modelNameLowerInv #>" OnValidSubmit="Delete<#= modelName #>" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(<#= modelNameLowerInv #> is null)">Delete</button> |
            <a href="/<#= pluralModelLowerInv #>">Back to List</a>
        </EditForm>
    }
</div>

@code {
    <#= modelName #>? <#= modelNameLowerInv #>;

    [SupplyParameterFromQuery]
    public <#= primaryKeyShortTypeName #> <#= primaryKeyName #> { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        <#= modelNameLowerInv #> = await context.<#= entitySetName #>.FirstOrDefaultAsync(m => m.<#= primaryKeyName #> == <#= primaryKeyName #>);

        if (<#= modelNameLowerInv #> is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task Delete<#= modelName #>()
    {
        using var context = DbFactory.CreateDbContext();
        context.<#= entitySetName #>.Remove(<#= modelNameLowerInv #>!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/<#= pluralModelLowerInv #>");
    }
}
