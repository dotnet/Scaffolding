// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.DotNet.Tools.Scaffold.AspNet.Templates.BlazorIdentity.Pages.Manage
{
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class EnableAuthenticator : EnableAuthenticatorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("@page \"/Account/Manage/EnableAuthenticator\"\r\n\r\n@using System.ComponentModel.DataA" +
                    "nnotations\r\n@using System.Globalization\r\n@using System.Text\r\n@using System.Text." +
                    "Encodings.Web\r\n@using Microsoft.AspNetCore.Identity\r\n");

if (!string.IsNullOrEmpty(Model.DbContextNamespace))
{

            this.Write("@using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DbContextNamespace));
            this.Write("\r\n");
} 
            this.Write("\r\n@inject UserManager<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UserClassName));
            this.Write("> UserManager\r\n@inject IdentityUserAccessor UserAccessor\r\n@inject UrlEncoder UrlE" +
                    "ncoder\r\n@inject IdentityRedirectManager RedirectManager\r\n@inject ILogger<EnableA" +
                    "uthenticator> Logger\r\n\r\n<PageTitle>Configure authenticator app</PageTitle>\r\n\r\n@i" +
                    "f (recoveryCodes is not null)\r\n{\r\n    <ShowRecoveryCodes RecoveryCodes=\"recovery" +
                    "Codes.ToArray()\" StatusMessage=\"@message\" />\r\n}\r\nelse\r\n{\r\n    <StatusMessage Mes" +
                    "sage=\"@message\" />\r\n    <h3>Configure authenticator app</h3>\r\n    <div>\r\n       " +
                    " <p>To use an authenticator app go through the following steps:</p>\r\n        <ol" +
                    " class=\"list\">\r\n            <li>\r\n                <p>\r\n                    Downl" +
                    "oad a two-factor authenticator app like Microsoft Authenticator for\r\n           " +
                    "         <a href=\"https://go.microsoft.com/fwlink/?Linkid=825072\">Android</a> an" +
                    "d\r\n                    <a href=\"https://go.microsoft.com/fwlink/?Linkid=825073\">" +
                    "iOS</a> or\r\n                    Google Authenticator for\r\n                    <a" +
                    " href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.aut" +
                    "henticator2&amp;hl=en\">Android</a> and\r\n                    <a href=\"https://itu" +
                    "nes.apple.com/us/app/google-authenticator/id388497605?mt=8\">iOS</a>.\r\n          " +
                    "      </p>\r\n            </li>\r\n            <li>\r\n                <p>Scan the QR " +
                    "Code or enter this key <kbd>@sharedKey</kbd> into your two factor authenticator " +
                    "app. Spaces and casing do not matter.</p>\r\n                <div class=\"alert ale" +
                    "rt-info\">Learn how to <a href=\"https://go.microsoft.com/fwlink/?Linkid=852423\">e" +
                    "nable QR code generation</a>.</div>\r\n                <div></div>\r\n              " +
                    "  <div data-url=\"@authenticatorUri\"></div>\r\n            </li>\r\n            <li>\r" +
                    "\n                <p>\r\n                    Once you have scanned the QR code or i" +
                    "nput the key above, your two factor authentication app will provide you\r\n       " +
                    "             with a unique code. Enter the code in the confirmation box below.\r\n" +
                    "                </p>\r\n                <div class=\"row\">\r\n                    <di" +
                    "v class=\"col-md-6\">\r\n                        <EditForm Model=\"Input\" FormName=\"s" +
                    "end-code\" OnValidSubmit=\"OnValidSubmitAsync\" method=\"post\">\r\n                   " +
                    "         <DataAnnotationsValidator />\r\n                            <div class=\"f" +
                    "orm-floating mb-3\">\r\n                                <InputText @bind-Value=\"Inp" +
                    "ut.Code\" class=\"form-control\" autocomplete=\"off\" placeholder=\"Please enter the c" +
                    "ode.\" />\r\n                                <label for=\"code\" class=\"control-label" +
                    " form-label\">Verification Code</label>\r\n                                <Validat" +
                    "ionMessage For=\"() => Input.Code\" class=\"text-danger\" />\r\n                      " +
                    "      </div>\r\n                            <button type=\"submit\" class=\"w-100 btn" +
                    " btn-lg btn-primary\">Verify</button>\r\n                            <ValidationSum" +
                    "mary class=\"text-danger\" role=\"alert\" />\r\n                        </EditForm>\r\n " +
                    "                   </div>\r\n                </div>\r\n            </li>\r\n        </" +
                    "ol>\r\n    </div>\r\n}\r\n\r\n@code {\r\n    private const string AuthenticatorUriFormat =" +
                    " \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n\r\n    private string?" +
                    " message;\r\n    private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UserClassName));
            this.Write(" user = default!;\r\n    private string? sharedKey;\r\n    private string? authentica" +
                    "torUri;\r\n    private IEnumerable<string>? recoveryCodes;\r\n\r\n    [CascadingParame" +
                    "ter]\r\n    private HttpContext HttpContext { get; set; } = default!;\r\n\r\n    [Supp" +
                    "lyParameterFromForm]\r\n    private InputModel Input { get; set; } = new();\r\n\r\n   " +
                    " protected override async Task OnInitializedAsync()\r\n    {\r\n        user = await" +
                    " UserAccessor.GetRequiredUserAsync(HttpContext);\r\n\r\n        await LoadSharedKeyA" +
                    "ndQrCodeUriAsync(user);\r\n    }\r\n\r\n    private async Task OnValidSubmitAsync()\r\n " +
                    "   {\r\n        // Strip spaces and hyphens\r\n        var verificationCode = Input." +
                    "Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n        var is2fa" +
                    "TokenValid = await UserManager.VerifyTwoFactorTokenAsync(\r\n            user, Use" +
                    "rManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n      " +
                    "  if (!is2faTokenValid)\r\n        {\r\n            message = \"Error: Verification c" +
                    "ode is invalid.\";\r\n            return;\r\n        }\r\n\r\n        await UserManager.S" +
                    "etTwoFactorEnabledAsync(user, true);\r\n        var userId = await UserManager.Get" +
                    "UserIdAsync(user);\r\n        Logger.LogInformation(\"User with ID \'{UserId}\' has e" +
                    "nabled 2FA with an authenticator app.\", userId);\r\n\r\n        message = \"Your auth" +
                    "enticator app has been verified.\";\r\n\r\n        if (await UserManager.CountRecover" +
                    "yCodesAsync(user) == 0)\r\n        {\r\n            recoveryCodes = await UserManage" +
                    "r.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n        }\r\n        else\r\n  " +
                    "      {\r\n            RedirectManager.RedirectToWithStatus(\"Account/Manage/TwoFac" +
                    "torAuthentication\", message, HttpContext);\r\n        }\r\n    }\r\n\r\n    private asyn" +
                    "c ValueTask LoadSharedKeyAndQrCodeUriAsync(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UserClassName));
            this.Write(" user)\r\n    {\r\n        // Load the authenticator key & QR code URI to display on " +
                    "the form\r\n        var unformattedKey = await UserManager.GetAuthenticatorKeyAsyn" +
                    "c(user);\r\n        if (string.IsNullOrEmpty(unformattedKey))\r\n        {\r\n        " +
                    "    await UserManager.ResetAuthenticatorKeyAsync(user);\r\n            unformatted" +
                    "Key = await UserManager.GetAuthenticatorKeyAsync(user);\r\n        }\r\n\r\n        sh" +
                    "aredKey = FormatKey(unformattedKey!);\r\n\r\n        var email = await UserManager.G" +
                    "etEmailAsync(user);\r\n        authenticatorUri = GenerateQrCodeUri(email!, unform" +
                    "attedKey!);\r\n    }\r\n\r\n    private string FormatKey(string unformattedKey)\r\n    {" +
                    "\r\n        var result = new StringBuilder();\r\n        int currentPosition = 0;\r\n " +
                    "       while (currentPosition + 4 < unformattedKey.Length)\r\n        {\r\n         " +
                    "   result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(\' \');\r\n      " +
                    "      currentPosition += 4;\r\n        }\r\n        if (currentPosition < unformatte" +
                    "dKey.Length)\r\n        {\r\n            result.Append(unformattedKey.AsSpan(current" +
                    "Position));\r\n        }\r\n\r\n        return result.ToString().ToLowerInvariant();\r\n" +
                    "    }\r\n\r\n    private string GenerateQrCodeUri(string email, string unformattedKe" +
                    "y)\r\n    {\r\n        return string.Format(\r\n            CultureInfo.InvariantCultu" +
                    "re,\r\n            AuthenticatorUriFormat,\r\n            UrlEncoder.Encode(\"Microso" +
                    "ft.AspNetCore.Identity.UI\"),\r\n            UrlEncoder.Encode(email),\r\n           " +
                    " unformattedKey);\r\n    }\r\n\r\n    private sealed class InputModel\r\n    {\r\n        " +
                    "[Required]\r\n        [StringLength(7, ErrorMessage = \"The {0} must be at least {2" +
                    "} and at max {1} characters long.\", MinimumLength = 6)]\r\n        [DataType(DataT" +
                    "ype.Text)]\r\n        [Display(Name = \"Verification Code\")]\r\n        public string" +
                    " Code { get; set; } = \"\";\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }

private global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel _ModelField;

/// <summary>
/// Access the Model parameter of the template.
/// </summary>
private global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel Model
{
    get
    {
        return this._ModelField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelValueAcquired = false;
if (this.Session.ContainsKey("Model"))
{
    this._ModelField = ((global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel)(this.Session["Model"]));
    ModelValueAcquired = true;
}
if ((ModelValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "Model");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._ModelField = ((global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel)(tc.ConvertFrom(parameterValue)));
            ModelValueAcquired = true;
        }
        else
        {
            this.Error("The type \'Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel\' of t" +
                    "he parameter \'Model\' did not match the type of the data passed to the template.");
        }
    }
}
if ((ModelValueAcquired == false))
{
    object data = global::Microsoft.DotNet.Scaffolding.TextTemplating.CallContext.LogicalGetData("Model");
    if ((data != null))
    {
        this._ModelField = ((global::Microsoft.DotNet.Tools.Scaffold.AspNet.Models.BlazorIdentityModel)(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class EnableAuthenticatorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
