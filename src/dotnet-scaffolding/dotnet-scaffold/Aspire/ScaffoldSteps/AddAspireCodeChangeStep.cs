// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using Microsoft.DotNet.Scaffolding.CodeModification;
using Microsoft.DotNet.Scaffolding.Core.Scaffolders;
using Microsoft.DotNet.Scaffolding.Internal;
using Microsoft.DotNet.Scaffolding.Internal.Services;
using Microsoft.DotNet.Scaffolding.Internal.Telemetry;
using Microsoft.DotNet.Tools.Scaffold.Aspire.Helpers;
using Microsoft.DotNet.Tools.Scaffold.Aspire.Telemetry;
using Microsoft.Extensions.Logging;

namespace Microsoft.DotNet.Tools.Scaffold.Aspire.ScaffoldSteps;

/// <summary>
/// A scaffold step that applies code modifications for Aspire scenarios, including telemetry and auto-generated project property handling.
/// </summary>
internal class AddAspireCodeChangeStep : CodeModificationStep
{
    private readonly ILogger _logger;
    private readonly ITelemetryService _telemetryService;

    /// <summary>
    /// Initializes a new instance of the <see cref="AddAspireCodeChangeStep"/> class.
    /// </summary>
    /// <param name="logger">The logger instance.</param>
    /// <param name="telemetryService">The telemetry service instance.</param>
    public AddAspireCodeChangeStep(ILogger<CodeModificationStep> logger, ITelemetryService telemetryService) : base(logger)
    {
        _logger = logger;
        _telemetryService = telemetryService;
    }

    /// <summary>
    /// Executes the code modification step, adding auto-generated project properties and tracking telemetry.
    /// </summary>
    /// <param name="context">The scaffolder context.</param>
    /// <param name="cancellationToken">A cancellation token.</param>
    /// <returns>True if the step succeeded; otherwise, false.</returns>
    public override async Task<bool> ExecuteAsync(ScaffolderContext context, CancellationToken cancellationToken = default)
    {
        if (context.Properties.TryGetValue(nameof(CommandSettings), out var commandSettingsObj) &&
            commandSettingsObj is CommandSettings commandSettings)
        {
            await AddAutoGenProjectPropertiesAsync(commandSettings);
        }

        var result = await base.ExecuteAsync(context, cancellationToken);
        _telemetryService.TrackEvent(new AddAspireCodeChangeTelemetryEvent(context.Scaffolder.DisplayName, result));
        return result;
    }

    /// <summary>
    /// Adds auto-generated project properties to the code modifier properties if available.
    /// </summary>
    /// <param name="commandSettings">The command settings containing project information.</param>
    internal async Task AddAutoGenProjectPropertiesAsync(CommandSettings commandSettings)
    {
        var autoGenProjectNames = await AspireHelpers.GetAutoGeneratedProjectNamesAsync(commandSettings.AppHostProject, _logger);
        // Add the web worker project name if found
        if (autoGenProjectNames.TryGetValue(commandSettings.Project, out var autoGenProjectName))
        {
            CodeModifierProperties.Add(Constants.CodeModifierPropertyConstants.AutoGenProjectName, autoGenProjectName);
        }
    }
}
